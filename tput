#!/usr/bin/env bash
#
# A drop-in replacement for `tput` in Bash scripts that is extremely limited and
# opinionated.
#
# # Reasoning
#
# This code was originally written for a Bash TUI called nightfall (link below).
# In profiling that code it took around ~600 calls to `tput` to render the
# initial UI and that ended up being very slow on some systems.  Other systems
# (FreeBSD for example) just didn't work with some of the `tput` commands not
# being supported.
#
# I decided to "wrap" `tput` in a Bash function that would bake-in as much of
# the functionality I needed and then fork out to the external `tput` command
# when needed.  This Brought the number of forked `tput` calls to 0 to draw the
# UI which sped the program up immensely and resulted in FreeBSD working as
# well.
#
# # Synopsis
#
# `tput(1)` is a command that offers "Portable Terminal Control" but, in
# practice, is not very portable.  Posix specifies it must exist and support a
# small number of options but isn't very specific about its usage and command
# naming.
#
# A number of sources were surveyed to see what kind of usage is out there in
# the wild:
# - `tput` provided by Linux (via `ncurses`)
# - `tput.c` on FreeBSD
# - `tput.c` on illumos
# - `tput` usage on MacOS
#
# There is a large number of overlap in both arguments and commands but there
# are still some differences (notably `setaf` vs `AF` on FreeBSD, or the lack of
# `-S` and `-V` support on some operating systems).
#
# # Goal
#
# The goal of this project is to provide a drop-in replacement function that can
# be sourced (or copy and pasted) into existing Bash scripts and they will just
# reap the benefits of a more uniform `tput` command for outputting terminal
# control characters.  This will make the scripts execute much faster as well as
# work across more operating system independent version of `tput`.
#
# # Philosophy
#
# This version of `tput` should NOT break anything - it should just optimize for
# the common case of outputting terminal control characters.  When this version
# of `tput` can NOT do something itself it will instead opt to fork out to the
# external version of `tput` found.
#
# Because of this, this version will accept arguments like `-T <term>` but
# completely ignore them (unless passed to the external `tput` command) and
# instead *always* opt to output ANSI escape sequences.
#
# # References
#
# - https://nightfall.ysap.sh
# - https://github.com/dylanaraps/pure-bash-bible?tab=readme-ov-file#escape-sequences
# - https://github.com/fidian/ansi
# - https://linuxcommand.org/lc3_adv_tput.php
# - https://www.gnu.org/software/termutils/manual/termutils-2.0/html_chapter/tput_1.html
# - https://pubs.opengroup.org/onlinepubs/009696899/utilities/tput.html
#
# # License
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: May 12, 2025
# License: MIT

# `tput` wrapper - taken from https://github.com/bahamas10/bash-tput
tput() {
	local VERSION='bash tput (1.0.0)'

	local opt OPTIND OPTARG
	while getopts 'ST:V' opt; do
		case "$opt" in
			S) command tput "$@"; return $?;;
			T) true;;
			V) echo "$VERSION"; return 0;;
		esac
	done
	shift "$((OPTIND - 1))"

	local ESC=$'\x1b'
	case "$1" in
		bel) echo -n $'\x7';;
		sgr0 | me) echo -n "$ESC[0m";;
		bold) echo -n "$ESC[1m";;
		dim) echo -n "$ESC[2m";;
		rev) echo -n "$ESC[7m";;
		blink) echo -n "$ESC[5m";;
		setaf | AF) echo -n "$ESC[38;5;$2m";;
		setab | AB) echo -n "$ESC[48;5;$2m";;
		sc) echo -n "$ESC[7";;
		rc) echo -n "$ESC[8";;
		cnorm) echo -n "$ESC[?25h";;
		civis) echo -n "$ESC[?25l";;
		smcup) echo -n "$ESC[?1049h";;
		rmcup) echo -n "$ESC[?1049l";;
		clear) echo -n "$ESC[H$ESC[2J";;
		home) echo -n "$ESC[H";;
		cuu) echo -n "$ESC[$2A";;
		cud) echo -n "$ESC[$2B";;
		cuf) echo -n "$ESC[$2C";;
		cub) echo -n "$ESC[$2D";;
		cup)
			local row=$(($2 + 1))
			local col=$(($3 + 1))
			echo -n "$ESC[$row;${col}H";;
		*) command tput "$@"; return $?;;
	esac
}

if !(return 2>/dev/null); then
	tput "$@"
fi
